<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Commands_HttpError" xml:space="preserve">
    <value>Received '{0} {1}' response from server.
Details:
{2}</value>
  </data>
  <data name="Commands_UsingServiceUri" xml:space="preserve">
    <value>Using service at: {0}</value>
  </data>
  <data name="AzureCommandBase_RequiresSubscription" xml:space="preserve">
    <value>This command must be run from the NuGet Ops console with a current environment that has a subscription.</value>
  </data>
  <data name="CredentialProvider_Message" xml:space="preserve">
    <value>Enter the admin password for {0}.</value>
  </data>
  <data name="Help_CommandGroupsHeader" xml:space="preserve">
    <value>Command groups. Type 'nucmd help &lt;group&gt;' to see a list of commands available in that group</value>
  </data>
  <data name="Help_GlobalCommandsHeader" xml:space="preserve">
    <value>Global commands. Type 'nucmd help &lt;command&gt;' to see detailed command help information</value>
  </data>
  <data name="Help_GroupCommandsHeader" xml:space="preserve">
    <value>Commands in the '{0}' group. Type 'nucmd help {0} &lt;command&gt;' to see detailed command help information</value>
  </data>
  <data name="Help_UnknownCommand" xml:space="preserve">
    <value>'{0} {1}' is not a nucmd command.</value>
  </data>
  <data name="Help_UnknownGroup" xml:space="preserve">
    <value>'{0}' is not a nucmd group or command.</value>
  </data>
  <data name="ParameterRequired" xml:space="preserve">
    <value>The '{0}' parameter is required</value>
  </data>
  <data name="Program_CommandNotConvertible" xml:space="preserve">
    <value>Fatal Error: Command type '{0}' is not convertable to '{1}'.</value>
  </data>
  <data name="Program_MissingCommand" xml:space="preserve">
    <value>Missing command.</value>
  </data>
  <data name="Program_NoSuchCommand" xml:space="preserve">
    <value>Command not found: '{0}'. Use 'nucmd help' to list available commands.</value>
  </data>
  <data name="Program_NoSuchCommandInGroup" xml:space="preserve">
    <value>Command '{0}' not found in '{1}' group. Use 'nucmd help {1}' to list available commands.</value>
  </data>
  <data name="Scheduler_ColDeleteCommand_DeletingCollection" xml:space="preserve">
    <value>Deleting Job Collection '{1}' in scheduler service '{0}'.</value>
  </data>
  <data name="Scheduler_CollectionsCommand_GettingCollection" xml:space="preserve">
    <value>Getting Job Collection '{0}' in service '{1}'.</value>
  </data>
  <data name="Scheduler_CollectionsCommand_ListingCollections" xml:space="preserve">
    <value>Listing available scheduler job collections in the service '{0}'.</value>
  </data>
  <data name="Scheduler_ColNewCommand_CreatedCollection" xml:space="preserve">
    <value>Created Job Collection '{0}' in scheduler service '{1}'.</value>
  </data>
  <data name="Scheduler_ColNewCommand_CreatingCollection" xml:space="preserve">
    <value>Creating Job Collection '{0}' in scheduler service '{1}'.</value>
  </data>
  <data name="Scheduler_ColNewCommand_MaxRecurrenceIncomplete" xml:space="preserve">
    <value>Both MaxRecurrenceFrequency and MaxRecurrenceInterval must be specified if one is specified.</value>
  </data>
  <data name="Scheduler_CsDeleteCommand_DeletedService" xml:space="preserve">
    <value>Deleted scheduler service: {0}.</value>
  </data>
  <data name="Scheduler_CsDeleteCommand_DeletingService" xml:space="preserve">
    <value>Deleting scheduler service: {0}.</value>
  </data>
  <data name="Scheduler_CsListCommand_ListingAvailableServices" xml:space="preserve">
    <value>Listing available scheduler services.</value>
  </data>
  <data name="Scheduler_CsNewCommand_CreatedService" xml:space="preserve">
    <value>Created scheduler service: {0}.</value>
  </data>
  <data name="Scheduler_CsNewCommand_CreatingService" xml:space="preserve">
    <value>Creating scheduler service: {0}.</value>
  </data>
  <data name="Scheduler_JobsCommand_ListingJobs" xml:space="preserve">
    <value>Listing Jobs in Job Collection '{0}/{1}'.</value>
  </data>
  <data name="Scheduler_NewJobCommand_CreatedJob" xml:space="preserve">
    <value>Created Job '{0}' in Job Collection '{1}/{2}'.</value>
  </data>
  <data name="Scheduler_NewJobCommand_CreatingJob" xml:space="preserve">
    <value>Creating Job '{0}' in Job Collection '{1}/{2}'.</value>
  </data>
  <data name="Scheduler_NewJobCommand_WouldCreateJob" xml:space="preserve">
    <value>Would create job with the following definition:
{0}</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>NuCmd Usage:
  nucmd &lt;command&gt;
  nucmd &lt;group&gt; &lt;command&gt;</value>
  </data>
  <data name="Work_InvokeCommand_CreatedInvocation" xml:space="preserve">
    <value>Created Invocation: {0}.</value>
  </data>
  <data name="Work_InvokeCommand_CreatingInvocation_NoPayload" xml:space="preserve">
    <value>Creating Invocation of {0} with no payload.</value>
  </data>
  <data name="Work_InvokeCommand_CreatingInvocation_WithPayload" xml:space="preserve">
    <value>Creating Invocation of {0} with the following payload:</value>
  </data>
  <data name="Work_InvokeCommand_PayloadInvalid" xml:space="preserve">
    <value>Error deserializing payload: {0}.</value>
  </data>
  <data name="Work_PurgeCommand_PurgingAllInvocations" xml:space="preserve">
    <value>Purging all invocations...</value>
  </data>
  <data name="Work_PurgeCommand_PurgingInvocationsBefore" xml:space="preserve">
    <value>Purging invocations completed before {0} UTC...</value>
  </data>
  <data name="Work_StatsCommand_UnknownStatsType" xml:space="preserve">
    <value>Unknown stats type: {0}.</value>
  </data>
  <data name="Work_LogCommand_FetchingLog" xml:space="preserve">
    <value>Fetching log data for Invocation {0}...</value>
  </data>
  <data name="Work_LogCommand_RenderedLog" xml:space="preserve">
    <value>End of log for Invocation {0}.</value>
  </data>
  <data name="Work_LogCommand_RenderingLog" xml:space="preserve">
    <value>Log entries for Invocation {0}.</value>
  </data>
  <data name="Work_RunCommand_Invoked" xml:space="preserve">
    <value>Completed invocation of job {0}.</value>
  </data>
  <data name="Work_RunCommand_Invoking" xml:space="preserve">
    <value>Invoking job: {0}.</value>
  </data>
  <data name="Work_RunCommand_UnknownJob" xml:space="preserve">
    <value>Unknown job: {0}.</value>
  </data>
  <data name="Work_InvokeCommand_AlreadyRunning" xml:space="preserve">
    <value>An invocation of this job is already in progress.</value>
  </data>
  <data name="Scheduler_RefreshJobCommand_NoSuchJob" xml:space="preserve">
    <value>No such job: {0}.</value>
  </data>
  <data name="Scheduler_RefreshJobCommand_NotAWorkServiceJob" xml:space="preserve">
    <value>The job '{0}' is not a work service invocation.</value>
  </data>
  <data name="Scheduler_RefreshJobCommand_UpdatingUrl" xml:space="preserve">
    <value>Updating target url for job '{0}' from '{1}' to '{2}'</value>
  </data>
  <data name="EnvCommand_Data_Cert" xml:space="preserve">
    <value>Azure Certificate: {0}</value>
  </data>
  <data name="EnvCommand_Data_Datacenter" xml:space="preserve">
    <value> {0} - {1}</value>
  </data>
  <data name="EnvCommand_Data_Datacenters" xml:space="preserve">
    <value>Datacenters:</value>
  </data>
  <data name="EnvCommand_Data_Datacenter_Resource" xml:space="preserve">
    <value>  {0} resource '{1}': {2}</value>
  </data>
  <data name="EnvCommand_Data_Datacenter_Service" xml:space="preserve">
    <value>  {0} service: {1}</value>
  </data>
  <data name="EnvCommand_Data_Env" xml:space="preserve">
    <value>Environment: {0}</value>
  </data>
  <data name="EnvCommand_Data_Sub" xml:space="preserve">
    <value>Azure Subscription: {0} ({1})</value>
  </data>
  <data name="Command_NoEnv" xml:space="preserve">
    <value>No current environment. This command requires an environment.</value>
  </data>
  <data name="Command_NoSession" xml:space="preserve">
    <value>No current operations session. This command requires an operations session.</value>
  </data>
  <data name="Program_ErrorLoadingSession" xml:space="preserve">
    <value>Error loading session: {0}</value>
  </data>
  <data name="Command_UnknownDc" xml:space="preserve">
    <value>Environment '{0}' has no datacenter '{1}'.</value>
  </data>
  <data name="Command_UnknownEnv" xml:space="preserve">
    <value>Unknown Environment '{0}'.</value>
  </data>
  <data name="DatacenterCommandBase_NoDC" xml:space="preserve">
    <value>A datacenter must be specified using the -dc argument</value>
  </data>
  <data name="Db_CheckDacCommand_DeploymentAlerts" xml:space="preserve">
    <value>There are deployment alerts and I haven't written code to parse that yet :). Contact 'anurse' ;)</value>
  </data>
  <data name="Db_CheckDacCommand_DeploymentOperations" xml:space="preserve">
    <value>Operations that will be performed to deploy this DAC:</value>
  </data>
  <data name="Db_CheckDacCommand_GettingDeploymentReport" xml:space="preserve">
    <value>Getting deployment report to deploy Data-Tier Application {0} to database {1} on {2}.</value>
  </data>
  <data name="Db_CheckDacCommand_NothingToDeploy" xml:space="preserve">
    <value>Nothing to be deployed. The database is up-to-date!</value>
  </data>
  <data name="Db_CheckDacCommand_ReportMissingRequiredElement" xml:space="preserve">
    <value>Deployment report is missing required element: '{0}'.</value>
  </data>
  <data name="Db_CreateUserCommand_AdminingUser" xml:space="preserve">
    <value>Making {0} a db_owner on {1}.</value>
  </data>
  <data name="Db_CreateUserCommand_Connected" xml:space="preserve">
    <value>Connected to '{1}' database on '{0}'</value>
  </data>
  <data name="Db_CreateUserCommand_SavedToSecretStore" xml:space="preserve">
    <value>The connection string data has been saved to the secret store</value>
  </data>
  <data name="Db_CreateUserCommand_CreatedUser" xml:space="preserve">
    <value>Created Login: {0}
With Password: {1}
For use by the {2} service
Connection String: {3}</value>
  </data>
  <data name="Db_CreateUserCommand_CreatingLogin" xml:space="preserve">
    <value>Creating login {0} on {1}.</value>
  </data>
  <data name="Db_CreateUserCommand_CreatingUser" xml:space="preserve">
    <value>Creating user {0} on {1} database.</value>
  </data>
  <data name="Db_DatabaseCommandBase_EnterAdminPassword" xml:space="preserve">
    <value>Enter the password for the '{0}' account:</value>
  </data>
  <data name="Db_CreateUserCommand_GrantingUser" xml:space="preserve">
    <value>Granting {0} access to the {1} schema on {2} database.</value>
  </data>
  <data name="Db_DatabaseCommandBase_NoDatabaseInDatacenter" xml:space="preserve">
    <value>Datacenter {0} does not have a {1} resource named '{2}'.</value>
  </data>
  <data name="Db_DatabaseCommandBase_ResourceHasUnexpectedConnectionStringField" xml:space="preserve">
    <value>The {0} resource '{1}' has an unexpected Connection String field: '{2}'</value>
  </data>
  <data name="Db_DatabaseCommandBase_ResourceMissingRequiredConnectionStringField" xml:space="preserve">
    <value>The {0} resource '{1}' is missing a required Connection String field: '{2}'</value>
  </data>
  <data name="Db_CreateUserCommand_UsingConnectionString" xml:space="preserve">
    <value>Using provided connection string instead of using a known database in the environment.</value>
  </data>
  <data name="Db_CreateUserCommand_WouldCreateUser" xml:space="preserve">
    <value>Would create user {2} on server {0} for database {1}.</value>
  </data>
  <data name="Db_DeleteDacCommand_Deleting" xml:space="preserve">
    <value>Deleting Data-Tier Application {0} on {1}.</value>
  </data>
  <data name="Db_DeleteUserCommand_DroppingLogin" xml:space="preserve">
    <value>Dropping login {0} on {1}.</value>
  </data>
  <data name="Db_DeleteUserCommand_DroppingUser" xml:space="preserve">
    <value>Dropping user {0} on {1}.</value>
  </data>
  <data name="Db_DeleteUserCommand_NoLogin" xml:space="preserve">
    <value>Login {0} does not exist in {1}.</value>
  </data>
  <data name="Db_DeleteUserCommand_NoUser" xml:space="preserve">
    <value>User {0} does not exist in {1}.</value>
  </data>
  <data name="Db_DeleteUserCommand_UnableToCheckUser" xml:space="preserve">
    <value>Unable to check for a user {0} in {1}. The login no longer exists in the 'master' database!</value>
  </data>
  <data name="Db_DeployCommand_Deployed" xml:space="preserve">
    <value>Finished Deployment of DAC.</value>
  </data>
  <data name="Db_DeployCommand_Deploying" xml:space="preserve">
    <value>Deploying DAC {0} to database {1} on {2}.</value>
  </data>
  <data name="Db_UsersCommand_DisplayingPermissions" xml:space="preserve">
    <value>Permissions in the {0} database:</value>
  </data>
  <data name="EnvCommand_Data_PackageSource" xml:space="preserve">
    <value>{0} package source '{1}': {2}</value>
  </data>
  <data name="EnvCommand_Data_SecretStore" xml:space="preserve">
    <value>{0} secret store: {1}</value>
  </data>
  <data name="AzureCommandBase_RequiresToken" xml:space="preserve">
    <value>You must log in to Azure using "nucmd azure login" before running this command</value>
  </data>
  <data name="AzureCommandBase_TokenExpired" xml:space="preserve">
    <value>Your login token has expired, use "nucmd azure login" to refresh it.</value>
  </data>
  <data name="Azure_LoginCommand_AuthenticatedGettingSubscription" xml:space="preserve">
    <value>Authenticated. Verifying subscription access...</value>
  </data>
  <data name="Azure_LoginCommand_AuthenticationComplete" xml:space="preserve">
    <value>Authentication Complete. This subscription is now ready for use in other Azure commands.</value>
  </data>
  <data name="Azure_LoginCommand_AuthenticationFailed" xml:space="preserve">
    <value>Authentication Failed!</value>
  </data>
  <data name="Azure_LoginCommand_SubscriptionDisabled" xml:space="preserve">
    <value>Subscription is disabled!</value>
  </data>
  <data name="AzureCommandBase_FetchingServiceConfig" xml:space="preserve">
    <value>Fetching service configuration data for '{0}'...</value>
  </data>
  <data name="Command_WhatIfMode" xml:space="preserve">
    <value>**** Running in WhatIf mode. ****</value>
  </data>
  <data name="Package_AllVersionsRequiredIfVersionNull" xml:space="preserve">
    <value>Either the "Version" parameter must be specified or the "AllVersions" flag must be explicitly specified.</value>
  </data>
  <data name="Package_DeleteCommand_AuditBlobExists" xml:space="preserve">
    <value>The audit blob '{0}' already exists! Audit records are timestamped, so just try the request again.</value>
  </data>
  <data name="Package_DeleteCommand_BackingUp" xml:space="preserve">
    <value>No backup found, creating a backup.</value>
  </data>
  <data name="Package_DeleteCommand_BackupExists" xml:space="preserve">
    <value>Backup already exists.</value>
  </data>
  <data name="Package_DeleteCommand_CheckingBackup" xml:space="preserve">
    <value>Checking for a backup.</value>
  </data>
  <data name="Command_ConnectionInfo" xml:space="preserve">
    <value>Using SQL server '{0}' and storage account '{1}'.</value>
  </data>
  <data name="Package_DeleteCommand_DatabaseActions" xml:space="preserve">
    <value>Completed the following operations:</value>
  </data>
  <data name="Package_DeleteCommand_DeleteList_Confirm" xml:space="preserve">
    <value>Retype the Package ID (case-sensitive) to confirm:</value>
  </data>
  <data name="Package_DeleteCommand_DeleteList_Header" xml:space="preserve">
    <value>Do you want to delete the following packages from the {0} datacenter?</value>
  </data>
  <data name="Package_DeleteCommand_DeleteList_Item" xml:space="preserve">
    <value>* {0} {1}</value>
  </data>
  <data name="Package_DeleteCommand_DeletingPackageBlob" xml:space="preserve">
    <value>Deleting package blob '{0}'.</value>
  </data>
  <data name="Package_DeleteCommand_DeletingPackageData" xml:space="preserve">
    <value>Deleting data for '{0} {1}' from the '{2}' database on '{3}'.</value>
  </data>
  <data name="Package_DeleteCommand_DeletionCompleted" xml:space="preserve">
    <value>Deletion completed. The effects may take a few minutes to propagate.</value>
  </data>
  <data name="Package_DownloadingBlob" xml:space="preserve">
    <value>Downloading Package to temporary file...</value>
  </data>
  <data name="Package_DeleteCommand_IncorrectId" xml:space="preserve">
    <value>'{0}' is not the right Id. Remember it is case-sensitive.</value>
  </data>
  <data name="Command_MissingEnvironmentArguments" xml:space="preserve">
    <value>The "-db" and "-st" arguments must be specified if there is no current environment.</value>
  </data>
  <data name="Package_DeleteCommand_MissingSourceBlob" xml:space="preserve">
    <value>Package blob not found!</value>
  </data>
  <data name="Package_DeleteCommand_NonWhatIf" xml:space="preserve">
    <value>The command is NOT in WhatIf mode. Changes will be applied IMMEDIATELY.</value>
  </data>
  <data name="Package_DeleteCommand_UploadingBackup" xml:space="preserve">
    <value>Uploading Package Blob to backup container...</value>
  </data>
  <data name="Package_VersionAndAllVersionsSpecified" xml:space="preserve">
    <value>A specific version number to delete AND the AllVersions switch were both specified. Only one of these can be specified.</value>
  </data>
  <data name="Package_DeleteCommand_WritingAuditRecord" xml:space="preserve">
    <value>Writing audit record '{0}' to packages audit store.</value>
  </data>
  <data name="Package_DeleteCommand_WritingRegistrationAuditRecord" xml:space="preserve">
    <value>Writing audit record '{0}' to package registrations audit store.</value>
  </data>
  <data name="SystemConsole_ConfirmSuffix_DefaultNo" xml:space="preserve">
    <value>[y/N]:</value>
  </data>
  <data name="SystemConsole_ConfirmSuffix_DefaultYes" xml:space="preserve">
    <value>[Y/n]:</value>
  </data>
  <data name="SystemConsole_ConfirmUnknownAnswer" xml:space="preserve">
    <value>Unknown answer: '{0}'.</value>
  </data>
  <data name="SecretStoreCommandBase_StoreNameRequired" xml:space="preserve">
    <value>The 'Name' argument must be provided, or you must have a current environment specified.</value>
  </data>
  <data name="SecretStoreCommandBase_DatacenterScope" xml:space="preserve">
    <value>Scoping to datacenter {0}</value>
  </data>
  <data name="SecretStoreCommandBase_UsingEnvironmentStore" xml:space="preserve">
    <value>Using environment-level default secret store.</value>
  </data>
  <data name="SecretStoreProviderCommandBase_StoreRootMustBeProvided" xml:space="preserve">
    <value>The 'StoreRoot' argument must be provided, or there must be a secret store in the current environment.</value>
  </data>
  <data name="Secrets_GetCommand_SecretCopied" xml:space="preserve">
    <value>Secret '{0}' copied to clipboard.</value>
  </data>
  <data name="Secrets_GetCommand_SecretDoesNotExist" xml:space="preserve">
    <value>Secret '{0}' does not exist.</value>
  </data>
  <data name="Secrets_GetCommand_SecretValue" xml:space="preserve">
    <value>Value of secret '{0}':</value>
  </data>
  <data name="Secrets_ListCommand_Secrets" xml:space="preserve">
    <value>Secrets available in the store:</value>
  </data>
  <data name="Secrets_LogCommand_AuditLog" xml:space="preserve">
    <value>Audit log for '{0}' secret:</value>
  </data>
  <data name="Secrets_SetCommand_EnterValue" xml:space="preserve">
    <value>Enter the value for the '{0}' secret:</value>
  </data>
  <data name="Secrets_SetCommand_ExpiryNotSet" xml:space="preserve">
    <value>An expiry time must be provided using either "-ExpiresAt" or "-ExpiresIn"</value>
  </data>
  <data name="Secrets_SetCommand_Writing" xml:space="preserve">
    <value>Writing value for secret '{0}' that will never expire</value>
  </data>
  <data name="Secrets_SetCommand_WritingWithExpiry" xml:space="preserve">
    <value>Writing value for secret '{0}' that will expire at {0} (local time)</value>
  </data>
  <data name="Secrets_SetCommand_Written" xml:space="preserve">
    <value>Secret '{0}' saved.</value>
  </data>
  <data name="Secret_CreateStoreCommand_Created" xml:space="preserve">
    <value>Secret store '{0}' created.</value>
  </data>
  <data name="Secret_CreateStoreCommand_StoreHeader" xml:space="preserve">
    <value>Secret Store for {0}. Allowed users:</value>
  </data>
  <data name="Secret_StoresCommand_Stores" xml:space="preserve">
    <value>Stores available in '{0}':</value>
  </data>
  <data name="Config_ShowCommand_ConfigEntry" xml:space="preserve">
    <value>* {0} = {1} &lt;{2}&gt;</value>
  </data>
  <data name="Config_ShowCommand_DisplayingConfig" xml:space="preserve">
    <value>Displaying configuration for '{0}' service in '{1}':</value>
  </data>
  <data name="Config_ShowCommand_NoSuchService" xml:space="preserve">
    <value>Service '{0}' does not exist in '{1}'!</value>
  </data>
  <data name="Group_azure" xml:space="preserve">
    <value>Commands for managing Windows Azure resources</value>
  </data>
  <data name="Group_config" xml:space="preserve">
    <value>Commands for managing configuration</value>
  </data>
  <data name="Group_db" xml:space="preserve">
    <value>Commands for managing SQL Databases</value>
  </data>
  <data name="Group_package" xml:space="preserve">
    <value>Commands for managing packages</value>
  </data>
  <data name="Group_scheduler" xml:space="preserve">
    <value>Commands for managing the Windows Azure Scheduler</value>
  </data>
  <data name="Group_secrets" xml:space="preserve">
    <value>Commands for managing the Secret Store</value>
  </data>
  <data name="Group_work" xml:space="preserve">
    <value>Commands for accessing the Work Service</value>
  </data>
  <data name="SecretStoreProviderCommandBase_UnknownType" xml:space="preserve">
    <value>Unknown secret store type '{0}'.</value>
  </data>
  <data name="Secrets_DeleteCommand_Deleted" xml:space="preserve">
    <value>Deleted secret '{0}'</value>
  </data>
  <data name="Secrets_DeleteCommand_NoSecret" xml:space="preserve">
    <value>Could not find secret '{0}'</value>
  </data>
  <data name="Secrets_UndeleteCommand_NoSecret" xml:space="preserve">
    <value>Could not find secret '{0}'</value>
  </data>
  <data name="Secrets_UndeleteCommand_Restored" xml:space="preserve">
    <value>Restored secret '{0}'</value>
  </data>
  <data name="DefaultConsoleFormatter_AnonymousType" xml:space="preserve">
    <value>&lt;Anonymous Type&gt;</value>
  </data>
  <data name="Search_QueryCommand_Hits" xml:space="preserve">
    <value>{0} hits.</value>
  </data>
  <data name="Azure_CycleStorageKeyCommand_FetchingConfig" xml:space="preserve">
    <value>Fetching configuration for {0} service...</value>
  </data>
  <data name="Azure_CycleStorageKeyCommand_MissingConfigKey" xml:space="preserve">
    <value>The {0} service does not use the {1} storage account!</value>
  </data>
  <data name="Azure_CycleStorageKeyCommand_NoAzureRoles" xml:space="preserve">
    <value>No Azure Role Services were found in the app model!</value>
  </data>
  <data name="Command_EnvironmentHasNoSecretStore" xml:space="preserve">
    <value>Environment '{0}' has no secret store</value>
  </data>
  <data name="Command_SecretStoreNotCreated" xml:space="preserve">
    <value>Secret store for environment '{0}' has not been created. Use 'nucmd secrets createstore to' create it</value>
  </data>
  <data name="Command_UnknownSecretStoreType" xml:space="preserve">
    <value>Unknown secret store type: '{0}'</value>
  </data>
  <data name="Config_GenerateCommand_CompilingConfigTemplate" xml:space="preserve">
    <value>Compiling config template for '{0}'...</value>
  </data>
  <data name="Config_GenerateCommand_ExecutingTemplate" xml:space="preserve">
    <value>Executing config template '{0}'</value>
  </data>
  <data name="Config_GenerateCommand_GeneratedConfig" xml:space="preserve">
    <value>Generated config file to '{0}'.</value>
  </data>
  <data name="Config_GenerateCommand_NoSuchService" xml:space="preserve">
    <value>Unable to find service '{0}' in the '{1}' datacenter. Check the AppModel.xml file.</value>
  </data>
  <data name="Config_GenerateCommand_NoTemplate" xml:space="preserve">
    <value>No config template found for '{0}'.</value>
  </data>
  <data name="Config_GenerateCommand_UnknownConfigTemplateSourceType" xml:space="preserve">
    <value>Unknown config template source type: '{0}'.</value>
  </data>
  <data name="Db_ApplyAdminPasswordCommand_AppliedPassword" xml:space="preserve">
    <value>Password applied!</value>
  </data>
  <data name="Db_ApplyAdminPasswordCommand_ApplyingPassword" xml:space="preserve">
    <value>Applying admin password from secret store key '{0}' to '{1}'.</value>
  </data>
  <data name="Db_ApplyAdminPasswordCommand_NoPasswordInStore" xml:space="preserve">
    <value>There is no password for '{0}' in the secret store.</value>
  </data>
  <data name="Db_CreateUserCommand_NoSchemasSpecified" xml:space="preserve">
    <value>No schemas specified to filter access for this user. Using "dbo".</value>
  </data>
  <data name="Db_CreateUserCommand_SavingConnectionString" xml:space="preserve">
    <value>Saving connection string to secret store key '{0}'</value>
  </data>
  <data name="Db_CreateUserCommand_SavingServiceUser" xml:space="preserve">
    <value>Saving link to connection string to secret store key '{0}'</value>
  </data>
  <data name="Db_DatabaseCommandBase_UsingSecretStore" xml:space="preserve">
    <value>Using Admin password from secret store.</value>
  </data>
  <data name="Db_GenerateAdminPasswordCommand_PasswordGenerated" xml:space="preserve">
    <value>The admin password for '{0}' in the secret store has been updated and stored in '{1}'. NOTE: The password has NOT YET BEEN CHANGED on the database server itself. Use 'nucmd db applyadminpassword' to set it.</value>
  </data>
  <data name="EnvCommand_Data_ConfigTemplates" xml:space="preserve">
    <value>{0} config templates: {1}</value>
  </data>
  <data name="Secrets_LogCommand_WroteEntries" xml:space="preserve">
    <value>Fetched {0} of {1} audit log entries</value>
  </data>
  <data name="ServiceCommandBase_UsingAdminKeyFromSecretStore" xml:space="preserve">
    <value>Using Admin Key from secret store.</value>
  </data>
  <data name="Package_PopulatePackageFrameworksCommand_Confirm" xml:space="preserve">
    <value>Do you want to process {0} package frameworks in the {1} data center?</value>
  </data>
  <data name="SystemConsole_ConfirmDenied" xml:space="preserve">
    <value>Command canceled by user.</value>
  </data>
  <data name="Config_GenerateCommand_NoTemplateSource" xml:space="preserve">
    <value>There is no configTemplates element in the AppModel for the '{0}' environment.</value>
  </data>
  <data name="Work_LogCommand_FetchingLatestInvocation" xml:space="preserve">
    <value>Fetching latest invocation of {0}</value>
  </data>
  <data name="Db_SanitizeCommand_CannotSanitize" xml:space="preserve">
    <value>Cannot sanitize {0}. The name must start with Export or Backup.</value>
  </data>
  <data name="Db_SanitizeCommand_Sanitized" xml:space="preserve">
    <value>Sanitized {0}/{1}.</value>
  </data>
  <data name="Db_SanitizeCommand_Sanitizing" xml:space="preserve">
    <value>Sanitizing {0}/{1}.</value>
  </data>
  <data name="Azure_TokenCommand_NoToken" xml:space="preserve">
    <value>You do not have an Azure Login Token</value>
  </data>
  <data name="Azure_TokenCommand_SubscriptionId" xml:space="preserve">
    <value>Your Azure Subscription ID is: {0}</value>
  </data>
  <data name="Azure_TokenCommand_Token" xml:space="preserve">
    <value>Your Azure Login Token is: {0}</value>
  </data>
  <data name="Certs_GrantCommand_Uploading" xml:space="preserve">
    <value>Uploading certificate '{0}' to {1}</value>
  </data>
  <data name="Certs_ImportCommand_Importing" xml:space="preserve">
    <value>Importing '{0}' in to '{1}' store in '{2}'</value>
  </data>
  <data name="Certs_UploadCommand_SecretIsNotACertificate" xml:space="preserve">
    <value>Secret is not a certificate: '{0}'.</value>
  </data>
  <data name="Certs_UploadCommand_UploadingCert" xml:space="preserve">
    <value>Uploading certificate '{0}' to {1}</value>
  </data>
  <data name="Certs_Uploaded" xml:space="preserve">
    <value>Upload complete!</value>
  </data>
  <data name="Db_DatabaseCommandBase_MissingAdminPassword" xml:space="preserve">
    <value>Admin password for database '{0}' could not be found!</value>
  </data>
  <data name="Group_certs" xml:space="preserve">
    <value>Commands for working with certificates</value>
  </data>
  <data name="Secrets_FollowingLink" xml:space="preserve">
    <value>Following link to "{0}"...</value>
  </data>
  <data name="Secrets_GetCommand_CertificateMetadata" xml:space="preserve">
    <value>Certificate cannot be exported. Here's the metadata:
Thumbprint: {0}
Subject: {1}
Expires: {2}</value>
  </data>
  <data name="Secrets_GetCommand_ThumbprintCopied" xml:space="preserve">
    <value>Certificate Thumbprint copied to clipboard.</value>
  </data>
  <data name="Secrets_NoSuchSecret" xml:space="preserve">
    <value>Could not find secret '{0}'.</value>
  </data>
  <data name="Secrets_StoreCertCommand_CertificateHasNoPrivateKey" xml:space="preserve">
    <value>The certificate does not have a private key, you probably don't need to store it in the secret store...</value>
  </data>
  <data name="Secrets_StoreCertCommand_SavingCertificate" xml:space="preserve">
    <value>Saving certificate to key: "{0}" that will expire at {1}</value>
  </data>
  <data name="Secrets_StoreCertCommand_SavingCertificateReference" xml:space="preserve">
    <value>Saving reference to certificate in: "{0}" that will expire at {1}</value>
  </data>
  <data name="Package_ReserveCommand_GrantingOwnership" xml:space="preserve">
    <value>Making {0} a co-owner of {1}</value>
  </data>
  <data name="Package_ReserveCommand_IdAlreadyExists" xml:space="preserve">
    <value>Unable to reserve '{0}'. It already exists!</value>
  </data>
  <data name="Package_ReserveCommand_OwnerAlreadyExists" xml:space="preserve">
    <value>User '{0}' is already an owner of '{1}'</value>
  </data>
  <data name="Package_ReserveCommand_Reserving" xml:space="preserve">
    <value>Reserving IDs: '{0}' for '{1}' on SQL Server '{2}'</value>
  </data>
  <data name="Package_ReserveCommand_ReservingId" xml:space="preserve">
    <value>Reserving Package ID: {0}</value>
  </data>
  <data name="Compute_RdpCommand_GettingRdpFile" xml:space="preserve">
    <value>Getting RDP file for instance {1} of the {0} service</value>
  </data>
  <data name="Compute_RdpCommand_LaunchingMstsc" xml:space="preserve">
    <value>Launching MSTSC...</value>
  </data>
  <data name="Compute_RdpCommand_MultipleInstances" xml:space="preserve">
    <value>There are multiple role instances in this service. An instance name is required!</value>
  </data>
  <data name="Compute_RdpCommand_NoInstances" xml:space="preserve">
    <value>There are no role instances in this service!</value>
  </data>
  <data name="Compute_RdpCommand_NoPasswordFound" xml:space="preserve">
    <value>No password found at secret store key 'rdp.{0}'. You will need to provide the password manually!</value>
  </data>
  <data name="Compute_RdpCommand_RemovingCredentials" xml:space="preserve">
    <value>Removing stored credentials from credential vault...</value>
  </data>
  <data name="Compute_RdpCommand_TemporarilyStoringPassword" xml:space="preserve">
    <value>Temporarily storing credentials in credential vault...</value>
  </data>
  <data name="Compute_RdpCommand_WaitingForCleanup" xml:space="preserve">
    <value>Waiting 5 seconds before cleaning up...</value>
  </data>
  <data name="Groups_compute" xml:space="preserve">
    <value>Commands for working with compute nodes</value>
  </data>
  <data name="Db_CreateUserCommand_FetchingDBs" xml:space="preserve">
    <value>Fetching database list...</value>
  </data>
  <data name="Db_CreateUserCommand_RetrievedDatabases" xml:space="preserve">
    <value>Retrieved {0} other databases to GRANT user access to.</value>
  </data>
  <data name="Db_CreateUserCommand_ServerManagering" xml:space="preserve">
    <value>Making {0} a dbmanger and loginmanager on the master database.</value>
  </data>
  <data name="Db_DeleteUserCommand_DeletingSecret" xml:space="preserve">
    <value>Deleting secret: {0}</value>
  </data>
  <data name="Db_UsersCommand_GatheringLoginAndDb" xml:space="preserve">
    <value>Gathering login and database data from master</value>
  </data>
  <data name="Db_UsersCommand_GatheringUsers" xml:space="preserve">
    <value>Gathering user data from {0}</value>
  </data>
  <data name="User_DeleteCommand_Confirm_Header" xml:space="preserve">
    <value>The following user will be deleted from the {0} datacenter:</value>
  </data>
  <data name="User_DeleteCommand_Confirm_Data" xml:space="preserve">
    <value>* {0} : {1}</value>
  </data>
  <data name="User_DeleteCommand_Error_PackageOwnerships" xml:space="preserve">
    <value>User owns packages and cannot be deleted. Ownerships: {0}; Pending Invites: {1}; Pending Requests: {2}.</value>
  </data>
  <data name="User_ConfirmEmailAddress" xml:space="preserve">
    <value>Enter the user's email address to confirm (be sure to confirm via email):</value>
  </data>
  <data name="User_DeleteCommand_DeletionCompleted" xml:space="preserve">
    <value>Deletion completed. The effects may take a few minutes to propagate.</value>
  </data>
  <data name="User_Error_IncorrectEmailAddress" xml:space="preserve">
    <value>'{0}' is not the right Email Address.</value>
  </data>
  <data name="User_WritingAuditRecord" xml:space="preserve">
    <value>Writing audit record '{0}' to users audit store.</value>
  </data>
  <data name="User_DeleteCommand_DatabaseActions" xml:space="preserve">
    <value>Completed the following operations:</value>
  </data>
  <data name="User_DeleteCommand_DeletingUserData" xml:space="preserve">
    <value>Deleting data for User '{0}' with Email Address '{1}' from the '{2}' database on '{3}'.</value>
  </data>
  <data name="User_RenameCommand_Confirm_Data" xml:space="preserve">
    <value>* {0} : {1}</value>
  </data>
  <data name="User_RenameCommand_Confirm_Header" xml:space="preserve">
    <value>The following user will be renamed in the {0} datacenter:</value>
  </data>
  <data name="User_RenameCommand_DatabaseActions" xml:space="preserve">
    <value>Completed the following operations:</value>
  </data>
  <data name="User_RenameCommand_UpdateCompleted" xml:space="preserve">
    <value>Update completed. The effects may take a few minutes to propagate.</value>
  </data>
  <data name="User_RenameCommand_UpdatingUserData" xml:space="preserve">
    <value>Updating data for User '{0}' with Email Address '{1}' from the '{2}' database on '{3}'.</value>
  </data>
  <data name="User_RenameCommand_Error_NewUsernameExists" xml:space="preserve">
    <value>Cannot rename user to have the username of '{0}' because a user with that username already exists with the email address of '{1}'.</value>
  </data>
  <data name="Package_ReserveCommand_ExistingOwner" xml:space="preserve">
    <value>Existing Owner: {0}</value>
  </data>
  <data name="Package_DeleteCommand_InvalidPackagesConfig" xml:space="preserve">
    <value>Either {0} doesn't exist or is not a valid packages config file.</value>
  </data>
  <data name="Package_DeleteCommand_InvalidArguments" xml:space="preserve">
    <value>Either 'Id' or 'PackagesConfig' argument must be specified.</value>
  </data>
</root>